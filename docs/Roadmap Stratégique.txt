# üó∫Ô∏è Roadmap Strat√©gique - √âMERGENCE V8.0

*Version : 2025-09-14*

Cette feuille de route consolide la vision V8 en d√©crivant l‚Äô√©tat courant et les jalons √† venir. Elle articule les piliers (chat multi-agents, m√©moire progressive, RAG, cockpit, d√©bats) et priorise les chantiers en fonction des risques identifi√©s.

---

## Principes directeurs
- **Architecture modulaire** : chaque capability (chat, m√©moire, documents, d√©bats, cockpit) est encapsul√©e (backend service + module frontend d√©di√©).
- **S√©curit√© & Auth** : tout appel REST/WS requiert un ID token (mode dev d√©sactiv√© en production ; la route `/api/auth/dev/login` r√©pond 404 tant que `AUTH_DEV_MODE=0`).
- **Observabilit√©** : instrumentation native (`ws:model_info`, `ws:memory_banner`, `dashboard`), scripts de smoke-tests pour valider les invariants.
- **Sobri√©t√© des co√ªts** : orchestration multi-fournisseurs (Google ‚Üí Anthropic ‚Üí OpenAI) + suivi des co√ªts (`DashboardService`).

## Phase 2 : La M√©moire Vive (Fondation)
* **Objectif principal :** Donner √† √âMERGENCE une m√©moire persistante, intelligente et capable d‚Äôoubli s√©lectif.
* **Concepts cl√©s :**
    - **Sauvegarde int√©grale :** Stockage de chaque session (dialogues, d√©bats, m√©tadonn√©es) dans un champ JSON unique.
    - **Analyse s√©mantique :** Extraction automatique de th√®mes, concepts et entit√©s de chaque session.
    - **Score de vivacit√© & oubli :** Simulation d‚Äôun m√©canisme d‚Äôoubli en faisant d√©cro√Ætre un ¬´ score de pertinence ¬ª dans le temps pour prioriser les souvenirs r√©cents ou importants.
* **√âtat d‚Äôavancement (Phase 2 - M√©moire) :**
    - Chaque concept/fait vectoris√© embarque des m√©tadonn√©es de vitalit√© (`vitality`, `usage_count`, `last_access_at`, `last_decay_at`).
    - Le Jardinier applique √† chaque ronde une d√©croissance progressive (base + bonus selon l‚Äôanciennet√©) et purge les souvenirs sous le seuil de vivacit√©.
    - Les rappels conversationnels rehaussent la vitalit√© des souvenirs consult√©s et ignorent ceux en dessous du seuil de rappel.
* **Modules impact√©s/cr√©√©s :**
    - `core/database.py` (modifi√©)
    - `core/session_manager.py` (nouveau)
    - `features/memory/analyzer.py` (nouveau)
    - `features/memory/gardener.py` (nouveau, pour l‚Äôoubli)
    - `core/temporal_search.py` (nouveau)

---

## √âtat actuel (2025-09)
- **Chat temps r√©el** : op√©rationnel via WS + fallback REST. Threads persist√©s (SQLite) avec hydratation automatique c√¥t√© front.
- **M√©moire STM/LTM** : `MemoryGardener` et `MemoryAnalyzer` en place (analyse globale ou cibl√©e, purge STM/LTM). Notifications front via `ws:analysis_status` / `ws:memory_banner`.
- **RAG documents** : upload `.pdf|.txt|.docx`, vectorisation Chroma, sources affich√©es dans le chat.
- **D√©bats multi-agents** : orchestr√©s par `DebateService`, synth√®se finale et export.
- **Cockpit** : agr√©gation co√ªts/sessions/documents expos√©e via `/api/dashboard/costs/summary` et rendue dans `DashboardModule`.

---

## Roadmap structur√©e

### P0 - Auth & sessions isol√©es (Priorit√©)
- D√©ployer un compte admin unique (`gonzalefernando@gmail.com`, mot de passe d√©fini) via seed/migration et documenter la proc√©dure.
- Garantir que chaque connexion cr√©e une session ind√©pendante : threads initiaux, STM/LTM et embeddings totalement s√©par√©s.
- [FAIT 2025-09-28] Migration `session_id` (threads/messages/documents) + propagation `X-Session-Id` sur REST/WS; front reset via `StateManager.resetForSession()`.
- Revoir les services (`AuthService`, `ChatService`, `MemoryGardener`, `MemoryAnalyzer`, `DocumentService`) pour s'assurer qu'ils respectent l'isolation par `session_id`.
- Mettre √† jour l'UI (HomeModule, StateManager, WebSocketClient) pour refl√©ter le statut session/token et exposer l'interface d'administration s√©curis√©e.
- Fournir tests adapt√©s (pytest + smoke scripts) et documentation (architecture, passation, runbooks) align√©e sur la nouvelle gouvernance des sessions.

### P2 ‚Äî M√©moire vive & consolidation continue (En cours)
- Optimiser l‚Äôexp√©rience utilisateur en cas d‚Äô√©chec auth (toasts explicites, re-prompt GIS).
- [FAIT 2025-09-27] Afficher l‚Äôhistorique de consolidation (`GET /api/memory/tend-garden`) dans l‚ÄôUI m√©moire.
- [FAIT] Couvrir `memory:clear` par tests automatises (pytest `tests/backend/features/test_memory_clear.py` integre dans `tests/run_all.ps1`).

### P3 ‚Äî RAG ma√Ætris√© (Stabilis√©)
- √âtendre les formats support√©s (Markdown, HTML l√©ger) en assurant la purge d‚Äôembeddings.
- Ajout de filtres RAG c√¥t√© UI (s√©lection docs par thread).

### P4 ‚Äî Interaction vocale (√Ä cadrer)
- POC micro front (enregistrement + streaming) + int√©gration STT/TTS avec fallback texte.
- D√©finir la strat√©gie co√ªt/latence (mod√®les vocaux vs. LLM existants).

### P5 ‚Äî Analyse d‚Äôimages (√Ä venir)
- Inventaire des APIs multimodales compatibles (GPT-4o, Gemini 1.5).
- Adapter `ChatService` pour l‚Äôinjection d‚Äôassets binaires et la diffusion des r√©sultats.

### P6 ‚Äî Agent connect√© (Backlog)
- Design du `WebConnector` (scraping s√©curis√©, caches).
- D√©finir les politiques d‚Äôusage (quota, journalisation).

### P7 ‚Äî Cockpit √©tendu (It√©ratif)
- D√©composer les co√ªts par fournisseur/mod√®le.
- Ajouter la sant√© des services (vector store, latence WS) et une timeline d‚Äô√©v√©nements.

---

## √âtapes imm√©diates (Priorit√©s Semaine Courante)
1. [FAIT] Stabilite Auth : remontee visuelle front en place (livre le 26/09/2025, message Connexion requise).
2. [FAIT] Tests memoire : `tests/run_all.ps1` lance maintenant le scenario pytest `memory:clear` (`tests/backend/features/test_memory_clear.py`).
3. **Documentation UX** : compl√©ter `docs/Memoire.md` (pr√©sent document) avec captures/flows pour guider la QA manuelle.
4. **Surveillance vector store** : lancer `tests/test_vector_store_reset.ps1` chaque lundi 08:00 CET; archiver le log sous `docs/assets/memoire/vector-store-reset-YYYYMMDD.log` (revision backend, backup detecte, reponse upload) et noter le resultat dans `docs/passation.md`.
5. **Auth docs** : documenter le logout idempotent et le champ `session_revoked` (architecture + Memoire).

---

## Risques & points de vigilance
- **D√©pendances API** : absence de cl√© IA ‚Üí erreur serveur (`500`). Pr√©parer un mode ‚Äúlimit√©‚Äù pour les environnements d√©pourvus de cl√©s.
- **T√©l√©chargement SBERT** : premier appel long (cache local). Pr√©voir warm-up lors du d√©ploiement.
- **√âchecs silencieux** : beaucoup d‚Äôerreurs sont logu√©es sans feedback utilisateur (auth, WS). N√©cessit√© de toasts/CTA.
- **Vector store** : corruption possible (SQLite). Conserver les backups automatiques `vector_store_backup_*`.

---

## R√©f√©rences
- Architecture d√©taill√©e : `docs/architecture/*.md`
- M√©moire progressive : `docs/Memoire.md`
- Tests : `tests/run_all.ps1`, `tests/backend/features/test_memory_clear.py`, `tests/test_vector_store_reset.ps1`, `tests/test_vector_store_force_backup.ps1`
