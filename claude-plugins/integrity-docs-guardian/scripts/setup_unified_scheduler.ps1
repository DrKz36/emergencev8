# ============================================================================
# SETUP UNIFIED SCHEDULER - Configuration de la t√¢che planifi√©e Phase 3
# ============================================================================
# Ce script configure une t√¢che planifi√©e Windows pour ex√©cuter
# le unified_guardian_scheduler.ps1 de mani√®re p√©riodique
# ============================================================================

param(
    [switch]$Force,
    [int]$IntervalMinutes = 60
)

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "‚öôÔ∏è  CONFIGURATION DU UNIFIED GUARDIAN SCHEDULER" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier les privil√®ges administrateur
$isAdmin = ([Security.Principal.WindowsPrincipal][Security.Principal.WindowsIdentity]::GetCurrent()).IsInRole([Security.Principal.WindowsBuiltInRole]::Administrator)
if (-not $isAdmin) {
    Write-Host "‚ö†Ô∏è  Ce script n√©cessite des privil√®ges administrateur" -ForegroundColor Yellow
    Write-Host "   Relancer PowerShell en tant qu'administrateur" -ForegroundColor Yellow
    Write-Host ""
    $response = Read-Host "Continuer quand m√™me? (O/N)"
    if ($response -ne "O" -and $response -ne "o") {
        exit 1
    }
}

# Configuration
$repoRoot = "C:\dev\emergenceV8"
if (-not (Test-Path $repoRoot)) {
    Write-Host "‚ùå Erreur: D√©p√¥t non trouv√© √† $repoRoot" -ForegroundColor Red
    exit 1
}

$taskName = "EmergenceUnifiedGuardian"
$scriptPath = Join-Path $repoRoot "claude-plugins\integrity-docs-guardian\scripts\unified_guardian_scheduler.ps1"

# V√©rifier que le script existe
if (-not (Test-Path $scriptPath)) {
    Write-Host "‚ùå Erreur: Script non trouv√©: $scriptPath" -ForegroundColor Red
    exit 1
}

Write-Host "üìã Configuration:" -ForegroundColor Yellow
Write-Host "   Nom de la t√¢che: $taskName" -ForegroundColor White
Write-Host "   Script: $scriptPath" -ForegroundColor White
Write-Host "   Intervalle: $IntervalMinutes minutes" -ForegroundColor White
Write-Host "   Dossier de travail: $repoRoot" -ForegroundColor White
Write-Host ""

# V√©rifier si la t√¢che existe d√©j√†
$existingTask = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue

if ($existingTask) {
    Write-Host "‚ÑπÔ∏è  La t√¢che '$taskName' existe d√©j√†" -ForegroundColor Yellow

    if ($Force) {
        Write-Host "   üîÑ Suppression de la t√¢che existante (mode -Force)..." -ForegroundColor Yellow
        Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
        Write-Host "   ‚úÖ T√¢che supprim√©e" -ForegroundColor Green
        $existingTask = $null
    } else {
        Write-Host ""
        $response = Read-Host "   Voulez-vous la recr√©er? (O/N)"
        if ($response -eq "O" -or $response -eq "o") {
            Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
            Write-Host "   ‚úÖ T√¢che supprim√©e" -ForegroundColor Green
            $existingTask = $null
        } else {
            Write-Host "   ‚è≠Ô∏è  Conservation de la t√¢che existante" -ForegroundColor Yellow
            Write-Host ""
            Write-Host "üí° Pour modifier la t√¢che, utilisez -Force ou supprimez-la manuellement:" -ForegroundColor Yellow
            Write-Host "   Unregister-ScheduledTask -TaskName '$taskName' -Confirm:`$false" -ForegroundColor Cyan
            Write-Host ""
            exit 0
        }
    }
}

# Cr√©er la t√¢che planifi√©e
if (-not $existingTask) {
    Write-Host ""
    Write-Host "üîß Cr√©ation de la t√¢che planifi√©e..." -ForegroundColor Green

    try {
        # D√©finir l'action - Ex√©cuter PowerShell en arri√®re-plan sans fen√™tre
        $action = New-ScheduledTaskAction `
            -Execute "powershell.exe" `
            -Argument "-WindowStyle Hidden -NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`"" `
            -WorkingDirectory $repoRoot

        Write-Host "   ‚úÖ Action configur√©e" -ForegroundColor White

        # D√©finir les d√©clencheurs
        # 1. Au d√©marrage du syst√®me
        $triggerStartup = New-ScheduledTaskTrigger -AtStartup

        # 2. R√©p√©tition p√©riodique (toutes les X minutes)
        $triggerRepeat = New-ScheduledTaskTrigger `
            -Once `
            -At (Get-Date).AddMinutes(5) `
            -RepetitionInterval (New-TimeSpan -Minutes $IntervalMinutes) `
            -RepetitionDuration ([TimeSpan]::MaxValue)

        Write-Host "   ‚úÖ D√©clencheurs configur√©s:" -ForegroundColor White
        Write-Host "      - Au d√©marrage du syst√®me" -ForegroundColor Gray
        Write-Host "      - Toutes les $IntervalMinutes minutes" -ForegroundColor Gray

        # D√©finir le principal (utilisateur qui ex√©cute la t√¢che)
        $principal = New-ScheduledTaskPrincipal `
            -UserId "$env:USERDOMAIN\$env:USERNAME" `
            -LogonType Interactive `
            -RunLevel Limited

        Write-Host "   ‚úÖ Principal configur√©: $env:USERDOMAIN\$env:USERNAME" -ForegroundColor White

        # D√©finir les param√®tres
        $settings = New-ScheduledTaskSettingsSet `
            -AllowStartIfOnBatteries `
            -DontStopIfGoingOnBatteries `
            -StartWhenAvailable `
            -RunOnlyIfNetworkAvailable:$false `
            -DontStopOnIdleEnd `
            -ExecutionTimeLimit (New-TimeSpan -Minutes 30) `
            -RestartCount 3 `
            -RestartInterval (New-TimeSpan -Minutes 5)

        Write-Host "   ‚úÖ Param√®tres configur√©s" -ForegroundColor White

        # Cr√©er la t√¢che
        $task = Register-ScheduledTask `
            -TaskName $taskName `
            -Action $action `
            -Trigger $triggerStartup, $triggerRepeat `
            -Principal $principal `
            -Settings $settings `
            -Description "√âMERGENCE - Unified Guardian Scheduler (Phase 3) - Orchestration automatique des agents de v√©rification" `
            -ErrorAction Stop

        Write-Host ""
        Write-Host "   ‚úÖ T√¢che planifi√©e cr√©√©e avec succ√®s!" -ForegroundColor Green
        Write-Host ""

        # Afficher les d√©tails de la t√¢che
        $taskInfo = Get-ScheduledTask -TaskName $taskName
        $taskDetails = Get-ScheduledTaskInfo -TaskName $taskName

        Write-Host "üìä D√©tails de la t√¢che:" -ForegroundColor Yellow
        Write-Host "   Nom: $($taskInfo.TaskName)" -ForegroundColor White
        Write-Host "   √âtat: $($taskInfo.State)" -ForegroundColor White
        Write-Host "   Prochaine ex√©cution: $($taskDetails.NextRunTime)" -ForegroundColor White
        Write-Host "   Derni√®re ex√©cution: $($taskDetails.LastRunTime)" -ForegroundColor White
        Write-Host "   Dernier r√©sultat: $($taskDetails.LastTaskResult)" -ForegroundColor White
        Write-Host ""

    } catch {
        Write-Host ""
        Write-Host "‚ùå Erreur lors de la cr√©ation de la t√¢che:" -ForegroundColor Red
        Write-Host "   $($_.Exception.Message)" -ForegroundColor Red
        Write-Host ""
        Write-Host "üí° Solution:" -ForegroundColor Yellow
        Write-Host "   1. V√©rifiez que vous avez les droits administrateur" -ForegroundColor White
        Write-Host "   2. Ou cr√©ez la t√¢che manuellement via le Planificateur de t√¢ches" -ForegroundColor White
        Write-Host ""
        Write-Host "   Programme: powershell.exe" -ForegroundColor Gray
        Write-Host "   Arguments: -NoProfile -ExecutionPolicy Bypass -File `"$scriptPath`"" -ForegroundColor Gray
        Write-Host "   R√©pertoire: $repoRoot" -ForegroundColor Gray
        Write-Host ""
        exit 1
    }
}

# Test optionnel
Write-Host "üß™ Test de la t√¢che" -ForegroundColor Yellow
$testResponse = Read-Host "Voulez-vous tester la t√¢che maintenant? (O/N)"

if ($testResponse -eq "O" -or $testResponse -eq "o") {
    Write-Host ""
    Write-Host "   üöÄ D√©marrage de la t√¢che..." -ForegroundColor White

    try {
        Start-ScheduledTask -TaskName $taskName
        Write-Host "   ‚úÖ T√¢che d√©marr√©e" -ForegroundColor Green
        Write-Host ""
        Write-Host "   ‚è≥ Attente de 5 secondes..." -ForegroundColor White
        Start-Sleep -Seconds 5

        $taskInfo = Get-ScheduledTaskInfo -TaskName $taskName
        Write-Host ""
        Write-Host "   üìä √âtat apr√®s ex√©cution:" -ForegroundColor Yellow
        Write-Host "      Dernier r√©sultat: $($taskInfo.LastTaskResult)" -ForegroundColor White
        Write-Host "      Derni√®re ex√©cution: $($taskInfo.LastRunTime)" -ForegroundColor White
        Write-Host ""

        if ($taskInfo.LastTaskResult -eq 0) {
            Write-Host "   ‚úÖ Test r√©ussi!" -ForegroundColor Green
        } else {
            Write-Host "   ‚ö†Ô∏è  Code de r√©sultat: $($taskInfo.LastTaskResult)" -ForegroundColor Yellow
            Write-Host "      V√©rifiez les logs pour plus de d√©tails" -ForegroundColor Yellow
        }

        # Afficher le chemin des logs
        $logDir = Join-Path $repoRoot "claude-plugins\integrity-docs-guardian\logs"
        Write-Host ""
        Write-Host "   üìÅ Logs disponibles dans:" -ForegroundColor Yellow
        Write-Host "      $logDir" -ForegroundColor Gray

    } catch {
        Write-Host "   ‚ùå Erreur lors du test: $($_.Exception.Message)" -ForegroundColor Red
    }
}

# R√©sum√© final
Write-Host ""
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "‚úÖ CONFIGURATION TERMIN√âE" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "üõ†Ô∏è  Commandes utiles:" -ForegroundColor Yellow
Write-Host ""
Write-Host "   # Voir l'√©tat de la t√¢che" -ForegroundColor Gray
Write-Host "   Get-ScheduledTask -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # D√©marrer la t√¢che manuellement" -ForegroundColor Gray
Write-Host "   Start-ScheduledTask -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Arr√™ter la t√¢che" -ForegroundColor Gray
Write-Host "   Stop-ScheduledTask -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # D√©sactiver la t√¢che" -ForegroundColor Gray
Write-Host "   Disable-ScheduledTask -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Activer la t√¢che" -ForegroundColor Gray
Write-Host "   Enable-ScheduledTask -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Supprimer la t√¢che" -ForegroundColor Gray
Write-Host "   Unregister-ScheduledTask -TaskName '$taskName' -Confirm:`$false" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Voir l'historique d'ex√©cution" -ForegroundColor Gray
Write-Host "   Get-ScheduledTaskInfo -TaskName '$taskName'" -ForegroundColor Cyan
Write-Host ""

Write-Host "üìÅ Fichiers importants:" -ForegroundColor Yellow
Write-Host "   Script: $scriptPath" -ForegroundColor Gray
Write-Host "   Logs: $(Join-Path $repoRoot 'claude-plugins\integrity-docs-guardian\logs')" -ForegroundColor Gray
Write-Host "   Rapports: $(Join-Path $repoRoot 'claude-plugins\integrity-docs-guardian\reports')" -ForegroundColor Gray
Write-Host ""

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""
