# Script d'activation du mode automatique complet
# Pour √âMERGENCE - Orchestration automatique des agents

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "ü§ñ ACTIVATION DU MODE AUTOMATIQUE COMPLET" -ForegroundColor Cyan
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

# V√©rifier si on est dans le bon dossier
$repoRoot = "C:\dev\emergenceV8"
if (-not (Test-Path $repoRoot)) {
    Write-Host "‚ùå Erreur: D√©p√¥t non trouv√© √† $repoRoot" -ForegroundColor Red
    exit 1
}

Set-Location $repoRoot

Write-Host "üìã Configuration du mode automatique complet..." -ForegroundColor Yellow
Write-Host ""

# 1. Variables d'environnement pour la session courante
Write-Host "1Ô∏è‚É£ Configuration des variables d'environnement (session courante):" -ForegroundColor Green
$env:AUTO_UPDATE_DOCS = "1"
$env:AUTO_APPLY = "1"
$env:AGENT_CHECK_INTERVAL = "60"
$env:PYTHONIOENCODING = "utf-8"

Write-Host "   ‚úÖ AUTO_UPDATE_DOCS = 1 (hook post-commit activ√©)" -ForegroundColor White
Write-Host "   ‚úÖ AUTO_APPLY = 1 (mise √† jour automatique de la doc)" -ForegroundColor White
Write-Host "   ‚úÖ AGENT_CHECK_INTERVAL = 60 minutes" -ForegroundColor White
Write-Host "   ‚úÖ PYTHONIOENCODING = utf-8" -ForegroundColor White
Write-Host ""

# 2. Ajouter au profil PowerShell pour persistance
Write-Host "2Ô∏è‚É£ Configuration du profil PowerShell (persistance):" -ForegroundColor Green

$profilePath = $PROFILE.CurrentUserAllHosts
if (-not (Test-Path $profilePath)) {
    New-Item -Path $profilePath -ItemType File -Force | Out-Null
    Write-Host "   ‚úÖ Profil PowerShell cr√©√©" -ForegroundColor White
}

# V√©rifier si les variables sont d√©j√† dans le profil
$profileContent = Get-Content $profilePath -Raw -ErrorAction SilentlyContinue

$varsToAdd = @"

# √âMERGENCE - Orchestration automatique des agents (ajout√© le $(Get-Date -Format 'yyyy-MM-dd HH:mm'))
`$env:AUTO_UPDATE_DOCS = "1"
`$env:AUTO_APPLY = "1"
`$env:AGENT_CHECK_INTERVAL = "60"
`$env:PYTHONIOENCODING = "utf-8"
"@

if ($profileContent -notmatch "AUTO_UPDATE_DOCS") {
    Add-Content -Path $profilePath -Value $varsToAdd
    Write-Host "   ‚úÖ Variables ajout√©es au profil PowerShell" -ForegroundColor White
    Write-Host "   üìÅ Profil: $profilePath" -ForegroundColor Gray
} else {
    Write-Host "   ‚ÑπÔ∏è  Variables d√©j√† pr√©sentes dans le profil" -ForegroundColor Yellow
}
Write-Host ""

# 3. Cr√©er une t√¢che planifi√©e pour le scheduler
Write-Host "3Ô∏è‚É£ Configuration de la t√¢che planifi√©e Windows:" -ForegroundColor Green

$taskName = "EMERGENCE_AutoOrchestration"
$taskExists = Get-ScheduledTask -TaskName $taskName -ErrorAction SilentlyContinue

if ($taskExists) {
    Write-Host "   ‚ÑπÔ∏è  T√¢che '$taskName' existe d√©j√†" -ForegroundColor Yellow
    $response = Read-Host "   Voulez-vous la recr√©er? (O/N)"
    if ($response -eq "O" -or $response -eq "o") {
        Unregister-ScheduledTask -TaskName $taskName -Confirm:$false
        Write-Host "   ‚úÖ Ancienne t√¢che supprim√©e" -ForegroundColor White
    } else {
        Write-Host "   ‚è≠Ô∏è  Conservation de la t√¢che existante" -ForegroundColor Yellow
        $taskExists = $null
    }
}

if (-not $taskExists) {
    # D√©finir l'action
    $pythonExe = (Get-Command python -ErrorAction SilentlyContinue).Source
    if (-not $pythonExe) {
        # Essayer avec le venv
        $pythonExe = "$repoRoot\.venv\Scripts\python.exe"
    }

    $scriptPath = "$repoRoot\claude-plugins\integrity-docs-guardian\scripts\scheduler.py"

    $action = New-ScheduledTaskAction `
        -Execute $pythonExe `
        -Argument "$scriptPath" `
        -WorkingDirectory $repoRoot

    # D√©finir le d√©clencheur (au d√©marrage + toutes les heures)
    $triggerStartup = New-ScheduledTaskTrigger -AtStartup
    $triggerHourly = New-ScheduledTaskTrigger -Once -At (Get-Date) -RepetitionInterval (New-TimeSpan -Hours 1) -RepetitionDuration ([TimeSpan]::MaxValue)

    # D√©finir les param√®tres
    $principal = New-ScheduledTaskPrincipal -UserId "$env:USERDOMAIN\$env:USERNAME" -LogonType Interactive
    $settings = New-ScheduledTaskSettingsSet `
        -AllowStartIfOnBatteries `
        -DontStopIfGoingOnBatteries `
        -StartWhenAvailable `
        -RunOnlyIfNetworkAvailable:$false `
        -DontStopOnIdleEnd

    # Cr√©er la t√¢che
    try {
        Register-ScheduledTask `
            -TaskName $taskName `
            -Action $action `
            -Trigger $triggerStartup, $triggerHourly `
            -Principal $principal `
            -Settings $settings `
            -Description "√âMERGENCE - Orchestration automatique des agents de v√©rification" `
            -ErrorAction Stop | Out-Null

        Write-Host "   ‚úÖ T√¢che planifi√©e '$taskName' cr√©√©e avec succ√®s" -ForegroundColor White
        Write-Host "   üìÖ Ex√©cution: Au d√©marrage + toutes les heures" -ForegroundColor Gray
    } catch {
        Write-Host "   ‚ö†Ô∏è  Impossible de cr√©er la t√¢che planifi√©e automatiquement" -ForegroundColor Yellow
        Write-Host "   üí° Vous pouvez la cr√©er manuellement via le Planificateur de t√¢ches" -ForegroundColor Yellow
        Write-Host "      Programme: $pythonExe" -ForegroundColor Gray
        Write-Host "      Arguments: $scriptPath" -ForegroundColor Gray
        Write-Host "      R√©pertoire: $repoRoot" -ForegroundColor Gray
    }
}
Write-Host ""

# 4. Test de l'installation
Write-Host "4Ô∏è‚É£ Test de l'installation:" -ForegroundColor Green
Write-Host "   üîÑ Ex√©cution du script de test..." -ForegroundColor White

$testScript = "$repoRoot\claude-plugins\integrity-docs-guardian\scripts\test_installation.py"
if (Test-Path $testScript) {
    & python $testScript
} else {
    Write-Host "   ‚ö†Ô∏è  Script de test non trouv√©" -ForegroundColor Yellow
}
Write-Host ""

# 5. R√©sum√© final
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host "‚úÖ MODE AUTOMATIQUE COMPLET ACTIV√â" -ForegroundColor Green
Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""

Write-Host "üìã Configuration appliqu√©e:" -ForegroundColor Yellow
Write-Host "   ‚úÖ Hook Git post-commit: ACTIV√â" -ForegroundColor White
Write-Host "      ‚Üí Les agents s'ex√©cutent automatiquement apr√®s chaque commit" -ForegroundColor Gray
Write-Host ""
Write-Host "   ‚úÖ Mise √† jour automatique de la doc: ACTIV√âE" -ForegroundColor White
Write-Host "      ‚Üí Les mises √† jour sont appliqu√©es et commit√©es automatiquement" -ForegroundColor Gray
Write-Host ""
Write-Host "   ‚úÖ Planificateur p√©riodique: ACTIV√â (toutes les heures)" -ForegroundColor White
Write-Host "      ‚Üí Surveillance continue m√™me sans commit" -ForegroundColor Gray
Write-Host ""

Write-Host "üí° Prochaines √©tapes:" -ForegroundColor Yellow
Write-Host "   1. Red√©marrer PowerShell pour charger les variables du profil" -ForegroundColor White
Write-Host "   2. Faire un commit pour tester le hook automatique" -ForegroundColor White
Write-Host "   3. V√©rifier les logs: claude-plugins\integrity-docs-guardian\logs\" -ForegroundColor White
Write-Host ""

Write-Host "üõ†Ô∏è  Commandes utiles:" -ForegroundColor Yellow
Write-Host "   # D√©sactiver le mode automatique" -ForegroundColor Gray
Write-Host "   .\claude-plugins\integrity-docs-guardian\scripts\disable_auto_mode.ps1" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Voir l'√©tat de la t√¢che planifi√©e" -ForegroundColor Gray
Write-Host "   Get-ScheduledTask -TaskName 'EMERGENCE_AutoOrchestration'" -ForegroundColor Cyan
Write-Host ""
Write-Host "   # Test manuel" -ForegroundColor Gray
Write-Host "   python claude-plugins\integrity-docs-guardian\scripts\auto_orchestrator.py" -ForegroundColor Cyan
Write-Host ""

Write-Host "================================================================" -ForegroundColor Cyan
Write-Host ""
