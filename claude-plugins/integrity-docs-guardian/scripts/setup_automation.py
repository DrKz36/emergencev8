#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
Script de configuration de l'automatisation Guardian
Configure les hooks Git et le scheduler pour une automatisation compl√®te
"""

import sys
import os
import subprocess
import platform
from pathlib import Path

# Fix encoding pour Windows
if sys.platform == 'win32':
    sys.stdout.reconfigure(encoding='utf-8') if hasattr(sys.stdout, 'reconfigure') else None

# Configuration
REPO_ROOT = Path(__file__).parent.parent.parent.parent
GIT_HOOKS_DIR = REPO_ROOT / ".git" / "hooks"
SCRIPTS_DIR = Path(__file__).parent


def print_header(text):
    """Print a formatted header"""
    print("\n" + "=" * 70)
    print(f"  {text}")
    print("=" * 70 + "\n")


def print_step(step_num, total, description):
    """Print a step header"""
    print(f"[{step_num}/{total}] {description}")
    print("-" * 70)


def run_command(cmd, description="", check=True):
    """Execute a command and return success status"""
    try:
        result = subprocess.run(
            cmd,
            cwd=REPO_ROOT,
            capture_output=True,
            text=True,
            check=check
        )
        return result.returncode == 0, result.stdout, result.stderr
    except subprocess.CalledProcessError as e:
        return False, e.stdout, e.stderr
    except Exception as e:
        return False, "", str(e)


def verify_hooks_executable():
    """Ensure Git hooks are executable (Unix/Linux/Mac)"""
    if platform.system() != "Windows":
        hooks = ["pre-commit", "post-commit", "pre-push"]
        for hook in hooks:
            hook_path = GIT_HOOKS_DIR / hook
            if hook_path.exists():
                os.chmod(hook_path, 0o755)
                print(f"   ‚úÖ {hook} rendu ex√©cutable")


def setup_git_config():
    """Configure Git pour utiliser les hooks"""
    print_step(1, 5, "Configuration Git")

    # V√©rifier que les hooks existent
    hooks_status = {}
    for hook in ["pre-commit", "post-commit", "pre-push"]:
        hook_path = GIT_HOOKS_DIR / hook
        hooks_status[hook] = hook_path.exists()

    all_exist = all(hooks_status.values())

    if all_exist:
        print("   ‚úÖ Tous les hooks Git sont pr√©sents:")
        for hook, exists in hooks_status.items():
            print(f"      - {hook}: {'‚úÖ' if exists else '‚ùå'}")

        # Rendre les hooks ex√©cutables
        verify_hooks_executable()

        print("\n   üí° Les hooks s'ex√©cuteront automatiquement:")
        print("      - pre-commit:  Avant chaque commit (v√©rifications)")
        print("      - post-commit: Apr√®s chaque commit (rapports)")
        print("      - pre-push:    Avant chaque push (v√©rif production)")
    else:
        print("   ‚ö†Ô∏è  Certains hooks sont manquants:")
        for hook, exists in hooks_status.items():
            print(f"      - {hook}: {'‚úÖ' if exists else '‚ùå MANQUANT'}")

    print()
    return all_exist


def setup_environment_variables():
    """Guide l'utilisateur pour configurer les variables d'environnement"""
    print_step(2, 5, "Configuration des Variables d'Environnement")

    is_windows = platform.system() == "Windows"

    print("   Pour activer l'automatisation compl√®te, configure ces variables:\n")

    env_vars = {
        "AUTO_UPDATE_DOCS": {
            "description": "Active la mise √† jour auto de la documentation",
            "values": "0 (d√©sactiv√©) ou 1 (activ√©)",
            "default": "0"
        },
        "AUTO_APPLY": {
            "description": "Applique et commit automatiquement les mises √† jour",
            "values": "0 (d√©sactiv√©) ou 1 (activ√©)",
            "default": "0"
        },
        "CHECK_GIT_STATUS": {
            "description": "V√©rifie les changements non commit√©s avant l'ex√©cution",
            "values": "0 (skip) ou 1 (v√©rifier)",
            "default": "1"
        }
    }

    # V√©rifier les valeurs actuelles
    print("   üìä Valeurs actuelles:")
    for var, info in env_vars.items():
        current = os.environ.get(var, info["default"])
        print(f"      - {var}={current} ({info['description']})")

    print("\n   üí° Pour configurer:")
    if is_windows:
        print("      PowerShell (session actuelle):")
        print("      $env:AUTO_UPDATE_DOCS='1'")
        print("      $env:AUTO_APPLY='1'")
        print("\n      PowerShell (permanent - ajoute √† ton $PROFILE):")
        print("      [System.Environment]::SetEnvironmentVariable('AUTO_UPDATE_DOCS','1','User')")
    else:
        print("      Bash/Zsh (ajoute √† ~/.bashrc ou ~/.zshrc):")
        print("      export AUTO_UPDATE_DOCS=1")
        print("      export AUTO_APPLY=1")

    print()


def verify_python_dependencies():
    """V√©rifie que les d√©pendances Python sont install√©es"""
    print_step(3, 5, "V√©rification des D√©pendances Python")

    # V√©rifier que Python est disponible
    python_cmd = sys.executable
    print(f"   üêç Python: {python_cmd}")

    # Test d'import des modules critiques
    required_modules = ["json", "subprocess", "pathlib"]
    all_ok = True

    for module in required_modules:
        try:
            __import__(module)
            print(f"   ‚úÖ Module '{module}' disponible")
        except ImportError:
            print(f"   ‚ùå Module '{module}' manquant")
            all_ok = False

    if all_ok:
        print("\n   ‚úÖ Toutes les d√©pendances sont pr√©sentes")
    else:
        print("\n   ‚ö†Ô∏è  Certaines d√©pendances sont manquantes")

    print()
    return all_ok


def test_agents():
    """Test que les agents s'ex√©cutent correctement"""
    print_step(4, 5, "Test des Agents Guardian")

    agents = [
        ("scan_docs.py", "Anima (DocKeeper)"),
        ("check_integrity.py", "Neo (IntegrityWatcher)"),
        ("check_prod_logs.py", "ProdGuardian"),
        ("generate_report.py", "Nexus (Coordinator)")
    ]

    all_ok = True
    for script, name in agents:
        script_path = SCRIPTS_DIR / script
        if script_path.exists():
            print(f"   ‚úÖ {name}: Script pr√©sent")
        else:
            print(f"   ‚ùå {name}: Script MANQUANT ({script})")
            all_ok = False

    if all_ok:
        print("\n   ‚úÖ Tous les agents sont pr√©sents et pr√™ts")
    else:
        print("\n   ‚ö†Ô∏è  Certains agents sont manquants")

    print()
    return all_ok


def show_usage_guide():
    """Affiche un guide d'utilisation"""
    print_step(5, 5, "Guide d'Utilisation")

    print("   üéØ AUTOMATISATION ACTIV√âE!\n")

    print("   üìã Ce qui se passe maintenant:\n")

    print("   1Ô∏è‚É£  AVANT CHAQUE COMMIT (pre-commit hook):")
    print("      - V√©rification de la couverture de tests")
    print("      - V√©rification de la doc API (OpenAPI)")
    print("      - Ex√©cution d'Anima (gaps de documentation)")
    print("      - Ex√©cution de Neo (int√©grit√© backend/frontend)")
    print("      ‚ö†Ô∏è  Le commit est BLOQU√â si erreurs critiques\n")

    print("   2Ô∏è‚É£  APR√àS CHAQUE COMMIT (post-commit hook):")
    print("      - G√©n√©ration du rapport unifi√© (Nexus)")
    print("      - Affichage d'un r√©sum√© d√©taill√©")
    print("      - Mise √† jour automatique de la doc (si AUTO_UPDATE_DOCS=1)\n")

    print("   3Ô∏è‚É£  AVANT CHAQUE PUSH (pre-push hook):")
    print("      - V√©rification de l'√©tat de la production (ProdGuardian)")
    print("      - V√©rification que tous les rapports sont OK")
    print("      ‚ö†Ô∏è  Le push est BLOQU√â si production en √©tat critique\n")

    print("   üí° Commandes utiles:\n")
    print("      - git commit           ‚Üí D√©clenche pre-commit + post-commit")
    print("      - git commit --no-verify ‚Üí Skip les hooks (d√©conseill√©)")
    print("      - git push             ‚Üí D√©clenche pre-push\n")

    print("   üìä Voir les rapports:")
    print(f"      - Documentation: {REPO_ROOT}/claude-plugins/integrity-docs-guardian/reports/docs_report.json")
    print(f"      - Int√©grit√©:     {REPO_ROOT}/claude-plugins/integrity-docs-guardian/reports/integrity_report.json")
    print(f"      - Production:    {REPO_ROOT}/claude-plugins/integrity-docs-guardian/reports/prod_report.json")
    print(f"      - Unifi√©:        {REPO_ROOT}/claude-plugins/integrity-docs-guardian/reports/unified_report.json\n")

    print("   üöÄ Pour le monitoring continu en arri√®re-plan:")
    print("      - Utilise le scheduler.py (voir HIDDEN_MODE_GUIDE.md)")
    print("      - Configure une t√¢che Windows Task Scheduler ou cron job\n")


def main():
    """Configuration principale"""
    print_header("ü§ñ √âMERGENCE Guardian - Configuration de l'Automatisation")

    print("Ce script va configurer l'automatisation compl√®te des agents Guardian:")
    print("  ‚úÖ Hooks Git (pre-commit, post-commit, pre-push)")
    print("  ‚úÖ Variables d'environnement")
    print("  ‚úÖ V√©rification des d√©pendances")
    print("  ‚úÖ Test des agents\n")

    # √âtape 1: Configuration Git
    hooks_ok = setup_git_config()

    # √âtape 2: Variables d'environnement
    setup_environment_variables()

    # √âtape 3: D√©pendances
    deps_ok = verify_python_dependencies()

    # √âtape 4: Test des agents
    agents_ok = test_agents()

    # √âtape 5: Guide d'utilisation
    show_usage_guide()

    # R√©sum√© final
    print_header("üìä R√âSUM√â DE LA CONFIGURATION")

    if hooks_ok and deps_ok and agents_ok:
        print("   ‚úÖ Configuration r√©ussie! L'automatisation est activ√©e.\n")
        print("   üéØ Prochain commit d√©clenchera automatiquement les agents Guardian.\n")
        return 0
    else:
        print("   ‚ö†Ô∏è  Configuration partiellement r√©ussie.\n")
        print("   Certains √©l√©ments n√©cessitent ton attention:")
        if not hooks_ok:
            print("      - ‚ùå Hooks Git manquants ou non configur√©s")
        if not deps_ok:
            print("      - ‚ùå D√©pendances Python manquantes")
        if not agents_ok:
            print("      - ‚ùå Certains agents manquants")
        print()
        return 1


if __name__ == "__main__":
    try:
        sys.exit(main())
    except KeyboardInterrupt:
        print("\n\n‚èπÔ∏è  Configuration interrompue")
        sys.exit(130)
