name: Deploy to Cloud Run

on:
  push:
    branches: [main]
    paths:
      - 'src/**'
      - 'Dockerfile'
      - 'package.json'
      - 'requirements.txt'
      - 'pyproject.toml'
      - '.github/workflows/deploy.yml'
      - 'scripts/run-backend.ps1'
      - 'scripts/run-backend.sh'

env:
  GCP_PROJECT_ID: emergence-469005
  GCP_REGION: europe-west1
  SERVICE_NAME: emergence-app
  IMAGE_NAME: gcr.io/emergence-469005/emergence-app

jobs:
  deploy:
    name: Build & Deploy to Cloud Run
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      # Authenticate to Google Cloud
      - id: auth
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      # Setup gcloud CLI
      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      # Configure Docker to use gcloud as credential helper for GCR
      - name: Configure Docker
        run: gcloud auth configure-docker gcr.io

      # Build Docker image
      - name: Build Docker image
        run: |
          docker build -t ${{ env.IMAGE_NAME }}:${{ github.sha }} .
          docker tag ${{ env.IMAGE_NAME }}:${{ github.sha }} ${{ env.IMAGE_NAME }}:latest

      # Push to Google Container Registry
      - name: Push to GCR
        run: |
          docker push ${{ env.IMAGE_NAME }}:${{ github.sha }}
          docker push ${{ env.IMAGE_NAME }}:latest

      # Deploy to Cloud Run using stable-service.yaml to preserve auth config
      - name: Deploy to Cloud Run
        run: |
          # Update the image in stable-service.yaml
          sed -i "s|image: .*|image: ${{ env.IMAGE_NAME }}:${{ github.sha }}|g" stable-service.yaml

          # Deploy using the YAML config (preserves allowlist & all env vars)
          gcloud run services replace stable-service.yaml \
            --region ${{ env.GCP_REGION }} \
            --quiet

          echo "‚úÖ Deployed with stable-service.yaml (auth config preserved)"

      # Get service URL
      - name: Get Service URL
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe ${{ env.SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> $GITHUB_OUTPUT
          echo "‚úÖ Deployed to: $SERVICE_URL"

      # Verify auth configuration
      - name: Verify Auth Config
        run: |
          echo "üîê Verifying authentication is enabled..."
          IAM_POLICY=$(gcloud run services get-iam-policy ${{ env.SERVICE_NAME }} \
            --region ${{ env.GCP_REGION }} \
            --format json)

          # Check if allUsers is NOT in the bindings (should be authenticated)
          if echo "$IAM_POLICY" | grep -q "allUsers"; then
            echo "‚ùå WARNING: Service is public (allUsers found in IAM policy)"
            echo "This should not happen with stable-service.yaml deployment"
            exit 1
          else
            echo "‚úÖ Service is properly authenticated (no allUsers in IAM)"
          fi

      # Health check
      - name: Health Check
        run: |
          sleep 10  # Wait for service to be ready
          curl -f ${{ steps.service-url.outputs.url }}/health || exit 1
          echo "‚úÖ Health check passed"
