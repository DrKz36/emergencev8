name: Restore Cloud Run IAM Access

on:
  workflow_dispatch:
    inputs:
      reason:
        description: "Pourquoi on r√©tablit l'acc√®s public (optionnel)"
        required: false
        type: string

env:
  GCP_PROJECT_ID: emergence-469005
  GCP_REGION: europe-west1
  SERVICE_NAME: emergence-app

jobs:
  restore:
    name: Reapply Cloud Run IAM binding
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - id: auth
        name: Authenticate to Google Cloud
        uses: google-github-actions/auth@v2
        with:
          credentials_json: ${{ secrets.GCP_SA_KEY }}

      - name: Set up Cloud SDK
        uses: google-github-actions/setup-gcloud@v2

      - name: Context
        if: ${{ inputs.reason != '' }}
        run: echo "‚ÑπÔ∏è  Reason: ${{ inputs.reason }}"

      - name: Reapply public invoker binding
        run: |
          echo "üîê Re-applying allUsers ‚Üí roles/run.invoker on $SERVICE_NAME"
          gcloud run services add-iam-policy-binding "$SERVICE_NAME" \
            --member="allUsers" \
            --role="roles/run.invoker" \
            --region "$GCP_REGION" \
            --quiet || echo "‚ÑπÔ∏è  allUsers already bound"

      - name: Remove allAuthenticatedUsers binding if present
        run: |
          echo "üßπ Removing allAuthenticatedUsers ‚Üí roles/run.invoker if present"
          gcloud run services remove-iam-policy-binding "$SERVICE_NAME" \
            --member="allAuthenticatedUsers" \
            --role="roles/run.invoker" \
            --region "$GCP_REGION" \
            --quiet && echo "‚úÖ Removed allAuthenticatedUsers binding" || echo "‚ÑπÔ∏è  No allAuthenticatedUsers binding found"

      - name: Fetch service URL
        id: service-url
        run: |
          SERVICE_URL=$(gcloud run services describe "$SERVICE_NAME" \
            --region "$GCP_REGION" \
            --format 'value(status.url)')
          echo "url=$SERVICE_URL" >> "$GITHUB_OUTPUT"
          echo "üåê Service URL: $SERVICE_URL"

      - name: Verify IAM policy state
        env:
          SERVICE_NAME: ${{ env.SERVICE_NAME }}
          GCP_REGION: ${{ env.GCP_REGION }}
        run: |
          echo "üõ°Ô∏è  Verifying IAM policy state"
          POLICY_JSON=$(gcloud run services get-iam-policy "$SERVICE_NAME" \
            --region "$GCP_REGION" \
            --format json)
          export POLICY_JSON
          python - <<'PY'
import json, os, sys
policy = json.loads(os.environ["POLICY_JSON"])
role = "roles/run.invoker"
bindings = [b for b in policy.get("bindings", []) if b.get("role") == role]
if not bindings:
    print("‚ùå No roles/run.invoker binding found", file=sys.stderr)
    sys.exit(1)

members = {member for b in bindings for member in b.get("members", [])}
if "allUsers" not in members:
    print("‚ùå allUsers binding missing after restore", file=sys.stderr)
    sys.exit(1)

if "allAuthenticatedUsers" in members:
    print("‚ùå allAuthenticatedUsers binding still present", file=sys.stderr)
    sys.exit(1)

print("‚úÖ IAM policy OK - allUsers present, allAuthenticatedUsers absent")
PY

      - name: Health check
        env:
          SERVICE_URL: ${{ steps.service-url.outputs.url }}
        run: |
          echo "ü©∫ Checking ${SERVICE_URL}/health"
          curl -f "${SERVICE_URL}/health" -H 'User-Agent: cloud-run-iam-restore' -m 30
          echo "‚úÖ Health check passed"
