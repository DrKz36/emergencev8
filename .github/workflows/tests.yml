name: Tests & Guardian Validation

on:
  push:
    branches: ['**']
  pull_request:
    branches: [main]

jobs:
  # Job 1 : Tests Backend
  test-backend:
    name: Backend Tests (Python 3.11)
    runs-on: ubuntu-latest

    env:
      # Variables d'environnement requises pour les tests
      GOOGLE_API_KEY: "fake-key-for-tests"
      GEMINI_API_KEY: "fake-key-for-tests"
      OPENAI_API_KEY: "fake-key-for-tests"
      ANTHROPIC_API_KEY: "fake-key-for-tests"

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: |
          python -m pip install --upgrade pip
          pip install -r requirements.txt

      - name: Run pytest
        run: pytest tests/backend/ -v --tb=short --maxfail=5
        timeout-minutes: 10
        continue-on-error: true

      - name: Ruff check
        run: ruff check src/backend/

      - name: Mypy type checking
        run: mypy src/backend/ --ignore-missing-imports --explicit-package-bases
        continue-on-error: true

  # Job 2 : Tests Frontend
  test-frontend:
    name: Frontend Tests (Node 22)
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-node@v4
        with:
          node-version: '22'
          cache: 'npm'

      - name: Install dependencies
        run: npm ci

      - name: Build frontend
        run: npm run build
        timeout-minutes: 5

  # Job 3 : Guardian Validation (parallèle aux tests)
  guardian:
    name: Guardian Validation
    runs-on: ubuntu-latest

    steps:
      - uses: actions/checkout@v4

      - uses: actions/setup-python@v4
        with:
          python-version: '3.11'
          cache: 'pip'

      - name: Install dependencies
        run: pip install -r requirements.txt

      - name: Run Anima (DocKeeper)
        run: |
          python claude-plugins/integrity-docs-guardian/scripts/scan_docs.py
          echo "✅ Anima completed"
        timeout-minutes: 3

      - name: Run Neo (IntegrityWatcher)
        run: |
          python claude-plugins/integrity-docs-guardian/scripts/check_integrity.py
          echo "✅ Neo completed"
        timeout-minutes: 3

      - name: Run Nexus (Coordinator)
        run: |
          python claude-plugins/integrity-docs-guardian/scripts/generate_report.py
          echo "✅ Nexus completed"
        timeout-minutes: 3

      - name: Generate Codex Summary
        run: |
          python scripts/generate_codex_summary.py
          echo "✅ Codex summary completed"
        timeout-minutes: 2

      - name: Upload Guardian Reports
        uses: actions/upload-artifact@v4
        if: always()
        with:
          name: guardian-reports
          path: |
            reports/*.json
            reports/codex_summary.md
          retention-days: 30

      - name: Check for Guardian failures
        run: |
          if grep -q '"status": "error"' reports/*.json 2>/dev/null; then
            echo "❌ Guardian détecté des erreurs"
            exit 1
          fi
          echo "✅ Guardian validation OK"

  # Job 4 : Quality Gate final (après tous les jobs)
  quality-gate:
    name: Quality Gate
    runs-on: ubuntu-latest
    needs: [test-backend, test-frontend, guardian]
    if: always()

    steps:
      - name: Check all jobs status
        run: |
          echo "🔍 Checking all jobs status..."
          echo "Backend tests: ${{ needs.test-backend.result }}"
          echo "Frontend tests: ${{ needs.test-frontend.result }}"
          echo "Guardian: ${{ needs.guardian.result }}"

          # Fail si Guardian ou frontend ont échoué (critiques)
          if [[ "${{ needs.guardian.result }}" != "success" ]]; then
            echo "❌ Guardian failed - blocking merge"
            exit 1
          fi

          if [[ "${{ needs.test-frontend.result }}" != "success" ]]; then
            echo "❌ Frontend tests failed - blocking merge"
            exit 1
          fi

          # Warning si backend tests échouent (mais ne bloque pas)
          if [[ "${{ needs.test-backend.result }}" != "success" ]]; then
            echo "⚠️  Backend tests failed - should be fixed but not blocking"
          fi

          echo "✅ Quality gate passed"
