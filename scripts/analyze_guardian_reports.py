#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""Outils d'analyse des rapports Guardian.

Le script peut g√©n√©rer un r√©sum√© synth√©tique (utile pour r√©pondre vite aux
utilisateurs) ou afficher une analyse d√©taill√©e de tous les signaux remont√©s
par les agents Guardian.
"""

import argparse
import json
import sys
from datetime import datetime
from pathlib import Path
from typing import Any, Dict

# Fix encoding Windows
if sys.platform == 'win32':
    import codecs
    sys.stdout = codecs.getwriter('utf-8')(sys.stdout.buffer, 'strict')
    sys.stderr = codecs.getwriter('utf-8')(sys.stderr.buffer, 'strict')

DEFAULT_REPORTS_DIR = Path(__file__).resolve().parent.parent / "reports"


def load_report(report_path: Path) -> Dict[str, Any]:
    """Charge un rapport Guardian en JSON."""

    with report_path.open("r", encoding="utf-8") as f:
        return json.load(f)


def analyze_prod_report(prod: Dict[str, Any]) -> None:
    """Affiche l'analyse d√©taill√©e du rapport production."""

    print("=" * 60)
    print(f"üìä PRODUCTION - {prod['service']}")
    print("=" * 60)
    print(f"Status: {prod['status']}")
    print(f"Logs analys√©s: {prod['logs_analyzed']} (derni√®re {prod['freshness']})")
    print(f"Timestamp: {prod['timestamp']}")
    print()

    # R√©sum√©
    summary = prod['summary']
    print(f"‚úÖ Erreurs: {summary['errors']}")
    print(f"‚ö†Ô∏è  Warnings: {summary['warnings']}")
    print(f"üö® Critical signals: {summary['critical_signals']}")
    print(f"üêå Latency issues: {summary['latency_issues']}")
    print()

    # Erreurs d√©taill√©es
    if prod['errors_detailed']:
        print("‚ùå ERREURS D√âTECT√âES:")
        for err in prod['errors_detailed']:
            print(f"   - {err['message']}")
            print(f"     Endpoint: {err.get('endpoint', 'N/A')}")
            print(f"     File: {err.get('file_path', 'N/A')}:{err.get('line_number', 'N/A')}")
            if err.get('stack_trace'):
                print(f"     Stack: {err['stack_trace'][:200]}...")
        print()

    # Warnings d√©taill√©s
    if prod['warnings_detailed']:
        print("‚ö†Ô∏è  WARNINGS:")
        for warn in prod['warnings_detailed']:
            print(f"   - {warn['message']}")
            print(f"     Endpoint: {warn.get('endpoint', 'N/A')}")
        print()

    # Patterns d'erreurs
    patterns = prod['error_patterns']
    if patterns['most_common_error']:
        print("üîç PATTERNS D'ERREURS:")
        print(f"   Erreur la plus fr√©quente: {patterns['most_common_error']}")
        if patterns['by_endpoint']:
            print("   Endpoints touch√©s:")
            for endpoint, count in list(patterns['by_endpoint'].items())[:5]:
                print(f"     - {endpoint}: {count} erreur(s)")
        print()

    # Recommandations
    if prod['recommendations']:
        print("üí° ACTIONS RECOMMAND√âES:")
        for rec in prod['recommendations']:
            print(f"   [{rec['priority']}] {rec['action']}")
            print(f"      ‚Üí {rec['details']}")
        print()

    # Commits r√©cents (contexte)
    if prod['recent_commits']:
        print("üìù COMMITS R√âCENTS:")
        for commit in prod['recent_commits'][:3]:
            print(f"   - {commit['hash']}: {commit['message']} ({commit['time']})")
        print()


def analyze_unified_report(unified: Dict[str, Any]) -> None:
    """Affiche l'analyse d√©taill√©e du rapport unifi√© Nexus."""

    print("=" * 60)
    print("üìã VUE D'ENSEMBLE (Nexus)")
    print("=" * 60)

    # Executive summary
    exec_sum = unified['executive_summary']
    status_icon = "‚úÖ" if exec_sum['status'] == 'ok' else "üî¥"
    print(f"{status_icon} {exec_sum['headline']}")
    print(f"Issues totales: {exec_sum['total_issues']} (Critical: {exec_sum['critical']}, Warnings: {exec_sum['warnings']})")
    print()

    # Priority actions
    if unified['priority_actions']:
        print("üî• PRIORITY ACTIONS:")
        for action in unified['priority_actions']:
            print(f"   [{action['priority']}] {action['description']}")
            print(f"      File: {action.get('file', 'N/A')}")
            print(f"      Fix: {action.get('recommendation', 'N/A')}")
        print()

    # Anima (Documentation)
    anima = unified['full_reports']['anima']
    print("üìö ANIMA (Documentation):")
    print(f"   Status: {anima['status']}")
    print(f"   Gaps trouv√©s: {anima['statistics']['gaps_found']}")
    print(f"   Updates propos√©es: {anima['statistics']['updates_proposed']}")

    if anima['documentation_gaps']:
        print("   ‚ö†Ô∏è  GAPS:")
        for gap in anima['documentation_gaps'][:5]:
            print(f"      - {gap.get('description', 'N/A')} ({gap.get('file', 'N/A')})")

    if anima['proposed_updates']:
        print("   üìù UPDATES PROPOS√âES:")
        for update in anima['proposed_updates'][:5]:
            print(f"      - {update.get('action', 'N/A')} ‚Üí {update.get('target_file', 'N/A')}")
    print()

    # Neo (Int√©grit√©)
    neo = unified['full_reports']['neo']
    print("üîç NEO (Int√©grit√©):")
    print(f"   Status: {neo['status']}")
    print(f"   Backend files changed: {neo['statistics']['backend_files_changed']}")
    print(f"   Frontend files changed: {neo['statistics']['frontend_files_changed']}")
    print(f"   Issues trouv√©es: {neo['statistics']['issues_found']}")

    if neo['issues']:
        print("   ‚ùå ISSUES:")
        for issue in neo['issues'][:5]:
            print(f"      - [{issue.get('category', 'N/A')}] {issue.get('description', 'N/A')}")
            print(f"        ‚Üí {issue.get('recommendation', 'N/A')}")
    print()

    # Recommandations par horizon
    recs = unified['recommendations']
    print("üí° RECOMMANDATIONS PAR HORIZON:")
    if recs['immediate'] and recs['immediate'][0] != "None - all checks passed":
        print(f"   üî• Immediate: {', '.join(recs['immediate'])}")
    if recs['short_term'] and recs['short_term'][0] != "Continue monitoring":
        print(f"   üìÖ Short-term: {', '.join(recs['short_term'])}")
    if recs['long_term'] and recs['long_term'][0] != "Maintain current practices":
        print(f"   üìã Long-term: {', '.join(recs['long_term'])}")
    print()


def print_summary(prod: Dict[str, Any], unified: Dict[str, Any]) -> None:
    """Affiche un r√©sum√© concis des rapports Guardian."""

    print("üìä Production (prod_report.json)")
    print(f"- Status: {prod['status']}")
    print(f"- Erreurs: {prod['summary']['errors']}")
    print(f"- Warnings: {prod['summary']['warnings']}")
    print()
    exec_summary = unified["executive_summary"]
    print("üìã Vue d'ensemble (unified_report.json)")
    print(f"- Status: {exec_summary['status']}")
    print(f"- Issues: {exec_summary['total_issues']}")
    print()


def parse_args() -> argparse.Namespace:
    """Analyse les arguments CLI."""

    parser = argparse.ArgumentParser(
        description="Analyse les rapports Guardian g√©n√©r√©s localement."
    )
    parser.add_argument(
        "--summary",
        action="store_true",
        help="Affiche uniquement un r√©sum√© concis conforme aux instructions Guardian.",
    )
    parser.add_argument(
        "--detailed",
        action="store_true",
        help=(
            "Force l'analyse d√©taill√©e m√™me si --summary est pr√©sent. Utile pour"
            " obtenir toutes les informations de debug."
        ),
    )
    parser.add_argument(
        "--reports-dir",
        type=Path,
        default=DEFAULT_REPORTS_DIR,
        help="Chemin vers le dossier contenant prod_report.json et unified_report.json.",
    )
    return parser.parse_args()


def main():
    """Point d'entr√©e principal."""

    args = parse_args()
    reports_dir = args.reports_dir.expanduser()

    prod_path = reports_dir / "prod_report.json"
    unified_path = reports_dir / "unified_report.json"

    try:
        prod = load_report(prod_path)
        unified = load_report(unified_path)

        summary_requested = args.summary and not args.detailed
        if summary_requested:
            print_summary(prod, unified)
            return

        print("\n" + "=" * 60)
        print("üìä ANALYSE RAPPORTS GUARDIAN")
        print(f"Timestamp: {datetime.now().strftime('%Y-%m-%d %H:%M:%S')}")
        print("=" * 60)
        print()

        analyze_prod_report(prod)
        analyze_unified_report(unified)

        print("=" * 60)
        print("‚úÖ ANALYSE TERMIN√âE")
        print("=" * 60)

    except FileNotFoundError as e:
        print(f"‚ùå ERREUR: Fichier rapport non trouv√©: {e}")
        print("   Assure-toi que les rapports Guardian ont √©t√© g√©n√©r√©s.")
        print("   Lance: pwsh -File claude-plugins/integrity-docs-guardian/scripts/run_audit.ps1")
    except json.JSONDecodeError as e:
        print(f"‚ùå ERREUR: Fichier rapport JSON invalide: {e}")
    except Exception as e:
        print(f"‚ùå ERREUR inattendue: {e}")


if __name__ == '__main__':
    main()
