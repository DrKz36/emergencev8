# tests/test_vector_store_reset.ps1 ‚Äî v1.1
# Valide l‚Äôauto-reset Chroma du VectorService en simulant une corruption de sch√©ma SQLite.
# √Ä ex√©cuter depuis la racine du repo. N√©cessite le backend d√©marr√© pour l'upload initial.
# Changelog v1.1:
# - UTF-8 console output (√©vite l'affichage corrompu des accents)
# - D√©tection/verrouillage du fichier: attend que le backend soit arr√™t√© avant la corruption
# - Tronquage via FileMode.Truncate (acc√®s exclusif)

# --- Pr√©ambule encodage UTF-8 ---
try { [Console]::OutputEncoding = [System.Text.Encoding]::UTF8 } catch {}
$PSDefaultParameterValues['Out-File:Encoding'] = 'utf8'

$ErrorActionPreference = "Stop"
$baseUrl    = "http://localhost:8000"
$repoRoot   = (Get-Location).Path
$vectorDir  = Join-Path $repoRoot "src\backend\data\vector_store"

Write-Host "=== [Pr√©flight] V√©rifications de base ==="
if (-not (Test-Path $vectorDir)) {
    throw "R√©pertoire vector_store introuvable : $vectorDir"
}

# 1) Upload initial (cr√©e le store si absent)
Write-Host "`n=== [1] Upload initial pour amorcer le store ==="
$testFile = Join-Path $repoRoot "test_upload.txt"
if (-not (Test-Path $testFile)) {
    "Ceci est un fichier de test pour √âMERGENCE." | Out-File -FilePath $testFile
    Write-Host "Fichier cr√©√© : $testFile"
}

try {
    $resp1 = & curl.exe -s -X POST -F "file=@$testFile;type=text/plain" "$baseUrl/api/documents/upload"
    Write-Host "R√©ponse upload initial : $resp1"
} catch {
    Write-Warning "Upload initial a √©chou√©. Le backend est-il d√©marr√© sur $baseUrl ?"
    throw
}

# 2) Cible SQLite √† corrompre
Write-Host "`n=== [2] Corruption cibl√©e du store SQLite ==="
$sqliteCandidate = Get-ChildItem -Path $vectorDir -Recurse -File -Include *.sqlite* |
                   Sort-Object Length -Descending | Select-Object -First 1

if (-not $sqliteCandidate) {
    Write-Warning "Aucun fichier *.sqlite* trouv√© sous $vectorDir. Le store Chroma a-t-il √©t√© cr√©√© ?"
    Write-Host "Astuce : relance l'upload initial puis r√©-ex√©cute ce script."
    throw "Impossible de poursuivre sans fichier SQLite."
}

Write-Host "Fichier SQLite cibl√© : $($sqliteCandidate.FullName)"
Write-Host "Taille avant corruption : $($sqliteCandidate.Length) octets"

# 2.a) V√©rifier si le fichier est verrouill√© -> demander d'arr√™ter le backend si besoin
function Test-FileUnlocked {
    param([string]$Path)
    try {
        $fs = [System.IO.File]::Open($Path,
                                     [System.IO.FileMode]::Open,
                                     [System.IO.FileAccess]::ReadWrite,
                                     [System.IO.FileShare]::None)
        $fs.Close()
        return $true
    } catch {
        return $false
    }
}

if (-not (Test-FileUnlocked -Path $sqliteCandidate.FullName)) {
    Write-Host "`nLe fichier SQLite est actuellement **verrouill√©** (backend probablement en cours)."
    Write-Host "üëâ Arr√™te le backend (Ctrl+C), puis je r√©essaie jusqu'√† ce qu'il soit lib√©r√©..."
    do {
        Start-Sleep -Seconds 1
    } until (Test-FileUnlocked -Path $sqliteCandidate.FullName)
    Write-Host "OK, fichier lib√©r√©."
}

# 2.b) Tronquer proprement (0 octet) avec acc√®s exclusif
try {
    $fs = [System.IO.File]::Open($sqliteCandidate.FullName,
                                 [System.IO.FileMode]::Truncate,
                                 [System.IO.FileAccess]::ReadWrite,
                                 [System.IO.FileShare]::None)
    $fs.Close()
} catch {
    throw "√âchec du tronquage exclusif de $($sqliteCandidate.FullName) : $($_.Exception.Message)"
}

$after = (Get-Item $sqliteCandidate.FullName).Length
Write-Host "Taille apr√®s corruption : $after octets"
if ($after -ne 0) {
    throw "La corruption n'a pas abouti (taille != 0). Abandon."
}

# 3) Pause technique : relance manuelle du backend (pour d√©clencher l'auto-reset √† l'init)
Write-Host "`n=== [3] Relance requise du backend ==="
Write-Host "üëâ Relance maintenant le backend dans une autre fen√™tre :"
Write-Host "   uvicorn --app-dir src backend.main:app --host 0.0.0.0 --port 8000"
[void](Read-Host "Appuie sur Entr√©e quand le backend est relanc√© et pr√™t")

# 4) V√©rifications : existence d'un backup + upload √† nouveau
Write-Host "`n=== [4] V√©rification du backup + upload post-reset ==="
$backups = Get-ChildItem -Path (Split-Path $vectorDir -Parent) -Directory -Filter "vector_store_backup_*" `
           | Sort-Object Name -Descending

if ($backups.Count -eq 0) {
    Write-Warning "Aucun dossier vector_store_backup_* d√©tect√©. V√©rifie les logs backend (auto-reset attendu)."
} else {
    Write-Host "Dernier backup d√©tect√© : $($backups[0].FullName)"
}

try {
    $resp2 = & curl.exe -s -X POST -F "file=@$testFile;type=text/plain" "$baseUrl/api/documents/upload"
    Write-Host "R√©ponse upload apr√®s reset : $resp2"
    Write-Host "`n=== ‚úÖ Test termin√© : auto-reset valid√© si backup cr√©√© et upload OK ==="
} catch {
    Write-Error "Upload apr√®s reset a √©chou√©. Consulte les logs backend."
    throw
}
