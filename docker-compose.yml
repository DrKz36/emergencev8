version: "3.8"

services:
  # Backend Python (FastAPI)
  backend:
    build:
      context: .
      dockerfile: Dockerfile
    container_name: emergence-backend
    restart: unless-stopped
    ports:
      - "8000:8000"
    environment:
      # Database
      - DATABASE_URL=sqlite:///./data/emergence.db
      - MONGODB_URI=mongodb://emergence:emergence@mongo:27017/emergence

      # Vector DB
      - CHROMADB_HOST=chromadb
      - CHROMADB_PORT=8000
      - CHROMADB_COLLECTION=emergence_memory

      # App Config
      - ENV=development
      - DEBUG=true
      - LOG_LEVEL=INFO

      # API Keys (à définir dans .env)
      - OPENAI_API_KEY=${OPENAI_API_KEY}
      - ANTHROPIC_API_KEY=${ANTHROPIC_API_KEY}
      - MISTRAL_API_KEY=${MISTRAL_API_KEY:-}
      - GOOGLE_API_KEY=${GOOGLE_API_KEY:-}

      # Auth
      - JWT_SECRET=${JWT_SECRET:-development-secret-change-in-production}
      - JWT_ALGORITHM=HS256
      - ACCESS_TOKEN_EXPIRE_MINUTES=1440

    volumes:
      # Hot reload backend
      - ./src:/app/src:ro
      # Persistence data
      - ./data:/app/data
      # Logs
      - ./logs:/app/logs
    depends_on:
      - mongo
      - chromadb
    command: ["uvicorn", "--app-dir", "src", "backend.main:app", "--host", "0.0.0.0", "--port", "8000", "--reload"]
    networks:
      - emergence-network

  # Frontend (Vite dev server)
  frontend:
    image: node:22-alpine
    container_name: emergence-frontend
    restart: unless-stopped
    working_dir: /app
    ports:
      - "5173:5173"
    environment:
      - VITE_API_URL=http://localhost:8000
      - VITE_WS_URL=ws://localhost:8000
    volumes:
      - ./:/app
      - /app/node_modules  # Prevent node_modules override
    command: ["npm", "run", "dev", "--", "--host", "0.0.0.0"]
    depends_on:
      - backend
    networks:
      - emergence-network

  # MongoDB (persistence threads, users, sessions)
  mongo:
    image: mongo:6.0
    container_name: emergence-mongo
    restart: unless-stopped
    ports:
      - "27017:27017"
    environment:
      MONGO_INITDB_ROOT_USERNAME: emergence
      MONGO_INITDB_ROOT_PASSWORD: emergence
      MONGO_INITDB_DATABASE: emergence
    volumes:
      - mongo_data:/data/db
      - mongo_config:/data/configdb
    networks:
      - emergence-network

  # ChromaDB (vector embeddings pour RAG)
  chromadb:
    image: chromadb/chroma:latest
    container_name: emergence-chromadb
    restart: unless-stopped
    ports:
      - "8001:8000"
    environment:
      - ANONYMIZED_TELEMETRY=false
      - ALLOW_RESET=true
      - IS_PERSISTENT=true
      - PERSIST_DIRECTORY=/chroma/chroma
    volumes:
      - chromadb_data:/chroma/chroma
    networks:
      - emergence-network

  # (Optionnel) Prometheus pour métriques
  # prometheus:
  #   image: prom/prometheus:latest
  #   container_name: emergence-prometheus
  #   restart: unless-stopped
  #   ports:
  #     - "9090:9090"
  #   volumes:
  #     - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml:ro
  #     - prometheus_data:/prometheus
  #   command:
  #     - '--config.file=/etc/prometheus/prometheus.yml'
  #     - '--storage.tsdb.path=/prometheus'
  #   networks:
  #     - emergence-network

  # (Optionnel) Grafana pour dashboards
  # grafana:
  #   image: grafana/grafana:latest
  #   container_name: emergence-grafana
  #   restart: unless-stopped
  #   ports:
  #     - "3000:3000"
  #   environment:
  #     - GF_SECURITY_ADMIN_PASSWORD=admin
  #   volumes:
  #     - grafana_data:/var/lib/grafana
  #   depends_on:
  #     - prometheus
  #   networks:
  #     - emergence-network

volumes:
  mongo_data:
    driver: local
  mongo_config:
    driver: local
  chromadb_data:
    driver: local
  # prometheus_data:
  #   driver: local
  # grafana_data:
  #   driver: local

networks:
  emergence-network:
    driver: bridge
