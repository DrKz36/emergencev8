# 2025-09-02 — Compte-rendu session & parking Cloud Run + Reprise Roadmap

## Handshake de session (Citadelle)

* ARBO-LOCK : **arborescence\_synchronisée\_20250830.txt** (30.08.2025) — source de vérité.
* Arbo utilisée : **arborescence\_synchronisée\_20250830.txt**.
* Action prévue impacte l’architecture : **non** (déploiement/traﬁc/env uniquement).
* Cible : clore l’incident Cloud Run proprement (parking) et reprendre la roadmap produit.

---

## Logs fournis (extrait factuel)

```text
Updated property [core/project].
Updated property [run/region].
IMAGE=europe-west1-docker.pkg.dev/emergence-469005/app/emergence-app:fix-bind-20250902143813
REGION=europe-west1
Deploying container to Cloud Run service [emergence-app] in project [emergence-469005] region [europe-west1]
X  Deploying...
  -  Creating Revision...
  .  Routing traffic...
  OK Setting IAM Policy...
Deployment failed
ERROR: (gcloud.run.deploy) Revision 'emergence-app-00135-k9p' is not ready and cannot serve traffic. The user-provided container failed to start and listen on the port defined provided by the PORT=8080 environment variable within the allocated timeout. This can happen when the container port is misconfigured or if the timeout is too short. The health check timeout can be extended. Logs for this revision might contain more information.
```

---

## Phase 0 — Synchronisation (A+B)

**A — Code/commande**

* Variables projet définies et visibles.
* Déploiement via `gcloud run deploy` avec `uvicorn --port 8080`, `timeout 900s`, caches HF, secrets OK.

**B — Archi**

* Aucun changement d’arborescence.
* Cible d’exécution : FastAPI `backend.main:app`.

**Sortie Phase 0** : exécution de la commande OK jusqu’au stade “Creating Revision / Routing traffic”; échec à la readiness de la révision `00135-k9p`.

---

## Phase 1 — Analyse d’impact

* **Service non-READY** : container perçu comme ne “répondant” pas sur `PORT=8080` dans la fenêtre de health check.
* **Hypothèses techniques (à rouvrir lors de la reprise Cloud Run)** :

  1. Cold start long (download HF) malgré `timeout 900s`.
  2. Healthcheck/PORT OK côté commande, mais readiness tombant avant le boot complet (réseau externe HF, 429, IO).
  3. Conflit mineur de commande vs ENTRYPOINT (peu probable vu l’usage direct de `uvicorn`).
* **Impact architecture** : aucun.

---

## Phase 2 — Décision

* **Parking Cloud Run** (priorité au dev produit). Rien à corriger côté repo pour l’instant.
* **Reprise ultérieure** : plan minimal et déterministe (10–15 min) proposé en annexe si besoin.

---

## Roadmap — Reprise (checklist resserrée)

### P1 — Core Product (priorité)

1. **Threads/messages** (persistance visible cross-device) :

   * Valider Firestore `users/{sub}/threads/{thread}/messages/{msg}` (R/W + listing par user).
   * Idempotence WS (start/chunk/end) et métriques de flux.
   * Sanity local : `GET /api/threads`, `POST /api/threads`, `POST /api/threads/{id}/messages`.
2. **UI/UX Chat & Débat** :

   * Mobile : safe-areas, header sticky, sidebar responsive, loader logo.
   * RAG toggle (état ON vert / OFF rouge) + tooltips.
   * Debat: sélection agents + nb de tours, styles chargés, feedback d’état.
3. **DevAuth & gating** :

   * Vérifier `GOOGLE_ALLOWED_EMAILS` côté front/back.
   * Page dev-auth (statique) incluse dans le build.

### P1.5 — Persistance & Mémoire

4. **Gardener/Analyzer** :

   * Lancer consolidations en tâche déclenchée post-message (non-bloquante).
   * Caches locaux sentence-transformers en dev (`SENTENCE_TRANSFORMERS_HOME`, `HF_HOME`).
   * Journalisation claire : début/fin, durée, taille vecteurs.
5. **RAG multi-docs** :

   * Upload, indexation, recherche par thread.
   * UI : indicateur de sources, bascule RAG par message.

### P2 — Cockpit léger (observabilité locale)

6. **/api/dashboard** :

   * Santé interne (routes montées, version app, latences récentes WS/HTTP, compteur 429/5xx simulés local).

---

## Plan d’exécution immédiat (local, Windows/venv)

```powershell
where python
where uvicorn
python -m pip install --upgrade pip
python -m pip install -r requirements.txt
python -m uvicorn --app-dir src backend.main:app --host 0.0.0.0 --port 8000
curl.exe -s http://127.0.0.1:8000/api/health
```

**Tests rapides**

```powershell
# Threads
curl.exe -s http://127.0.0.1:8000/api/threads | jq .
# Memory gardener
curl.exe -s http://127.0.0.1:8000/api/memory/tend-garden | jq .
# Débat (création)
# Adapter le body selon ton schéma actuel
```

---

## Critères de Done (lot courant)

* `/api/threads` R/W OK en local, data visible après reload navigateur.
* WS chat : aucune duplication d’événements, ordre stream respecté.
* UI mobile : header correct, RAG toggle lisible, pas de débordement.
* Gardener : log d’une consolidation exécutée après un message.

---

## Annexe — Reprise Cloud Run (quand tu voudras)

1. **Pré-warm modèle au build** (option solide, élimine 429 au boot) : ajouter après `pip install` dans Dockerfile :

```dockerfile
RUN python - <<'PY'
from sentence_transformers import SentenceTransformer
SentenceTransformer('sentence-transformers/all-MiniLM-L6-v2')
PY
```

2. **Déploiement déterministe** :

* `--command uvicorn --port 8080` (déjà validé) ou variante `bash -lc` avec `${PORT}`.
* Garde `--timeout 900` et `--min-instances 1`.

3. **Sanity post-déploiement** :

```powershell
gcloud run services update-traffic emergence-app --region europe-west1 --to-latest
$RUNURL=(gcloud run services describe emergence-app --region europe-west1 --format="value(status.url)")
curl.exe -si "$RUNURL/api/health"
```

---

## Snapshot (si l’arbo change plus tard)

```powershell
(tree /F /A | Out-String) | Set-Content -Encoding UTF8 .\arborescence_synchronisée_20250902.txt
```

---

## Checklist de sortie

* Phase 0 : Code + arbo validés (ARBO-LOCK actif).
* Phase 1 : Incident Cloud Run documenté; impact archi **non**.
* Phase 2 : Décision de **parking Cloud Run** actée. Roadmap priorisée livrée. Commandes locales fournies.
