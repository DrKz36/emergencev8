apiVersion: serving.knative.dev/v1
kind: Service
metadata:
  name: emergence-session-service
  annotations:
    run.googleapis.com/ingress: all
    run.googleapis.com/ingress-status: all
  labels:
    cloud.googleapis.com/location: europe-west1
    app: emergence
    service: session
spec:
  template:
    metadata:
      annotations:
        autoscaling.knative.dev/minScale: '2'
        autoscaling.knative.dev/maxScale: '20'
        run.googleapis.com/startup-cpu-boost: 'true'
        run.googleapis.com/cpu-throttling: 'false'
      labels:
        app: emergence
        service: session
        version: v1
    spec:
      containerConcurrency: 100
      timeoutSeconds: 900
      serviceAccountName: 486095406755-compute@developer.gserviceaccount.com
      containers:
      - name: session-service
        image: europe-west1-docker.pkg.dev/emergence-469005/app/emergence-session-service:latest
        ports:
        - name: http1
          containerPort: 8080
        env:
        # Database Configuration
        - name: EMERGENCE_DB_PATH
          value: "/app/data/emergence.db"

        # Session Configuration
        - name: SESSION_INACTIVITY_TIMEOUT_MINUTES
          value: "30"
        - name: SESSION_CLEANUP_INTERVAL_SECONDS
          value: "60"
        - name: SESSION_WARNING_BEFORE_TIMEOUT_SECONDS
          value: "120"

        # Memory/Vector Configuration (for session analysis)
        - name: MEMORY_ENABLED
          value: "true"
        - name: EMBED_MODEL_NAME
          value: "all-MiniLM-L6-v2"
        - name: EMERGENCE_VECTOR_DIR
          value: "/app/.chroma"

        # Service Configuration
        - name: PORT
          value: "8080"
        - name: LOG_LEVEL
          value: "INFO"
        - name: SERVICE_NAME
          value: "session-service"

        # Prometheus metrics
        - name: PROMETHEUS_ENABLED
          value: "true"

        resources:
          limits:
            cpu: '4'
            memory: 2Gi
          requests:
            cpu: '2'
            memory: 1Gi

        # Health checks
        livenessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 15
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 3

        readinessProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 10
          periodSeconds: 5
          timeoutSeconds: 3
          failureThreshold: 3

        startupProbe:
          httpGet:
            path: /api/health
            port: 8080
          initialDelaySeconds: 0
          periodSeconds: 10
          timeoutSeconds: 5
          failureThreshold: 60

  traffic:
  - latestRevision: true
    percent: 100
